package com.ktds.jmj.file.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.ktds.jmj.Const;
import com.ktds.jmj.article.vo.ArticleVO;
import com.ktds.jmj.file.vo.FileVO;
import com.ktds.jmj.util.xml.XML;

public class FileDAO {
	
	/**
	 * File List DAO
	 * @param fileVO
	 * @return
	 */
	public List<FileVO> getFileList( int articleId ){
		loadOracleDriver();
		
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		List<FileVO> files = new ArrayList<FileVO>();
		try{
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_USER, Const.DB_PASSWORD);
			String query = XML.getNodeString("//query/article/getAllArticleList/text()");
			stmt = conn.prepareStatement(query);
			stmt.setInt(1, articleId); // 끝나는 번호
			rs = stmt.executeQuery();
			
			FileVO file = new FileVO();
			
			while ( rs.next() ) {
				file.setArticleId(rs.getInt("ARTICLE_ID"));
				
				files.add(file);
			}
			
			return files;
			
		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		}
		finally {
			closeDB(conn, stmt, rs);
		}
	}
	
	public int writeFile ( FileVO file ){
		loadOracleDriver();
		
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_USER, Const.DB_PASSWORD);
			String query = XML.getNodeString("//query/article/writeArticle/text()");
			stmt = conn.prepareStatement(query);

			stmt.setString(2, file.getFileLocation());
			stmt.setString(3, file.getFileName());
			
			stmt.executeUpdate();
			
			return;
						
		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		}
		finally {
			closeDB(conn, stmt, null);
		}
	}

	
	
	
	/**
	 * Oracle Driver
	 */
	private void loadOracleDriver() {
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) {
			throw new RuntimeException(e.getMessage(), e);
		}
	}
	
	/**
	 * Close DB
	 */
	private void closeDB(Connection conn, PreparedStatement stmt, ResultSet rs) {
		if ( rs != null ) {
			try {
				rs.close();
			} catch (SQLException e) {
			}
		}
		if ( stmt != null ) {
			try {
				stmt.close();
			} catch (SQLException e) {
			}
		}
		if ( conn != null ) {
			try {
				conn.close();
			} catch (SQLException e) {
			}
		}
	}

}
