package com.ktds.jmj.dao;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.ktds.jmj.vo.EmployeesVO;

public class EmployeesDAO { //data access object
	
	
	public List<EmployeesVO> getAllEmployees() {
		
		try {
			Class.forName("oracle.jdbc.driver.OracleDriver");
		} catch (ClassNotFoundException e) { // catch에 있는 모든 것들은 이와 같이 쓴다.
			throw new RuntimeException(e.getMessage(), e);
		}
		
		Connection conn = null;
		PreparedStatement stmt = null; // statement와 PreparedStatement는 데이터를 어떤식으로 바이딩하는가의 차이가 있다.
		ResultSet rs = null;
		
		//employees list에 데이터를 하나씩 넣을 것이다.
		List<EmployeesVO> employees = new ArrayList<EmployeesVO>();
		
		// 담아주는 코드
		try {
			// DB에 연결함
			conn = DriverManager.getConnection(Const.DB_URL, Const.DB_USER, Const.DB_PASSWORD);
			
			//query를 실행할 준비를 함
			String query = " SELECT * FROM EMPLOYEES "; //앞뒤로 공간두기
			stmt = conn.prepareStatement(query); // 쿼리 실행 준비 완료			
			
			// Query의 실행 결과를 가져온다. 
			// Select 쿼리 일 때만 사용한다.
			rs = stmt.executeQuery();
			
			EmployeesVO employee = null;
			while ( rs.next() ) { //next의 의미 : 읽어올때 데이터의 처음부터 읽어오므로 next를 만나면 한 로우를 읽어오고 다음로우로 내려간다. next하면 한줄한줄 내려가면서 데이터를 가져오게 하는 역할 끝까지 가서 next를 만나면 반복이 끝난다.
				employee = new EmployeesVO();
				employee.setEmployeeId(rs.getInt("EMPLOYEE_ID")); // 가져올 컬럼의 데이터 타입에 따라서 결정, 괄호 안에는 컬럼 이름을 적어준다.
			}
			
			
		} catch (SQLException e) {
			throw new RuntimeException(e.getMessage(), e);
		}
		
		
		return employees;
	}

}
